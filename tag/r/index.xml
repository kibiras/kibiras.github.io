<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | DEADLIFT.LT</title>
    <link>https://deadlift.lt/tag/r/</link>
      <atom:link href="https://deadlift.lt/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2020 deadlift.lt ©</copyright><lastBuildDate>Wed, 27 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://deadlift.lt/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>https://deadlift.lt/tag/r/</link>
    </image>
    
    <item>
      <title>[EN] Dog monitoring solution</title>
      <link>https://deadlift.lt/post/en-dog-monitoring-solution/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>https://deadlift.lt/post/en-dog-monitoring-solution/</guid>
      <description>&lt;p&gt;Yeah, I have a dog. A really lovely and fun one named Loki, but sometimes he drives me and my girlfriend crazy. The background of this story is following: neighbours started to complain about some dog noises during the day. Of couse I had faith in my dog and knew that although he is very noisy sometimes, he wouldn&amp;rsquo;t do that. And I was right - one of my neighbours recently got a young dog and he did all that mess. However, I wanted to check how our dog is performing in terms of noise levels when we are out, so I have implemented a monitoring approach to test that and answer this question in a data-driven manner.&lt;/p&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_loki.png&#34; width=&#34;70%;&#34;&gt; 
&lt;p&gt;So, I want to track sound level during the day, what should I do? At first I tried recording audio and seeing the soundwave graph after the day - the results were as I expected: some random woofs during the day, several woofs during the lunch and around 5 PM. It&amp;rsquo;s good for one-time checks, but I&amp;rsquo;m not particularly interested how &lt;em&gt;woofs&lt;/em&gt; sound - I just want to know when the &lt;em&gt;woofing&lt;/em&gt; occured. Moreover, audio recordings are very space consuming. Ideally, I want just to measure decibels and write the output somewhere.&lt;/p&gt;
&lt;p&gt;There is an open source library written in python and called 
&lt;a href=&#34;https://pypi.org/project/soundmeter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;soundmeter&lt;/a&gt;. It&amp;rsquo;s a really simple command line tool, where you can set the frequency along with other parameters and get the output in real time - basically all I needed. Since this data won&amp;rsquo;t take much space, I simply wrote the output to plain text file (of couse I could use some streaming technologies e.g. Apache Kafka, but it would be like killing a fly with a bazooka). The setup is fairly easy - just need to install soundmeter via pip tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install soundmeter 
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_loki1.png&#34; width=&#34;50%;&#34;&gt; 
&lt;p&gt;Then I put my microphone next to my buddy&amp;rsquo;s cage (yeah, we leave our dog in a cage for his own safety). Since Loki is in the same place during the whole day, it&amp;rsquo;s really convenient from the monitoring and safety perspective. I wrapped this command line application in bash script for easier execution - all I need to do is to run this script and leave my pc on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
soundmeter --segment 0.5 --log /dev/stdout 2&amp;gt;/dev/null | unbuffer -p perl -p -e &#39;s/\s*(\d+)\s+(.{19})(.*)/&amp;quot;$2,&amp;quot;. 20*log($1)/e&#39; &amp;gt;&amp;gt; `date +&amp;quot;%m-%d-%Y&amp;quot;`_loki.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;ve been tracking my dog&amp;rsquo;s sound level for several months during the work days and came up with some pretty good amount of data. Since the output is in separate files, let&amp;rsquo;s map all these files to read_csv function (yey, some functional programming finally):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filenames &amp;lt;- list.files(&amp;quot;data/&amp;quot;, full.names = TRUE)
data &amp;lt;- map_df(filenames, function(f){
  read_csv(f, col_names = c(&amp;quot;time&amp;quot;, &amp;quot;db&amp;quot;)) %&amp;gt;%
    na.omit()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_loki2.png&#34; width=&#34;50%;&#34;&gt; 
&lt;p&gt;The microphone is not calibrated and the amount of decibels does not really reflect the reality, but it&amp;rsquo;s good for identifying the spikes (woofing periods or just making some noice in the cage). In order to visualize that, lets plot a histogram and you will see what I&amp;rsquo;m talking about:&lt;/p&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_hist.png&#34; width=&#34;70%;&#34;&gt;
&lt;p&gt;From histogram it&amp;rsquo;s really easy to identify two clusters - resting and messing around (barking) time. I&amp;rsquo;ll show you just a few lines of R code, because it&amp;rsquo;s really self-explanatory (R code in tidyverse is basically a short story about the data journey). Although the threshold of 100 is subjective, it does the trick for this purpose. I also made my dog to bark in order to see what level is reached and it proved my hypothesis as well - it&amp;rsquo;s way above 100 when the microphone is near his head.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data &amp;lt;- data %&amp;gt;%
  mutate(day = weekdays(time)) %&amp;gt;%
  filter(!day %in% c(&amp;quot;Sunday&amp;quot;, &amp;quot;Saturday&amp;quot;) &amp;amp; hour(time) &amp;gt;= 9 &amp;amp; hour(time) &amp;lt; 18) %&amp;gt;%
  mutate(status = ifelse(db &amp;gt; 100, &amp;quot;Barking&amp;quot;, &amp;quot;Resting&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s plot barking patterns now. From there, we can already identify data quality issues - probably I have turned on monitoring script when I was at home, this is why some days in November looked like a really noisy day from a dog&amp;rsquo;s perspective (plotting data really lets you to see the big picture).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data %&amp;gt;%
  filter(status == &amp;quot;Barking&amp;quot;) %&amp;gt;%
  ggplot() +
    geom_point(aes(time, db, color = status), size = 0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_bark.png&#34; width=&#34;80%;&#34;&gt;
&lt;p&gt;Let&amp;rsquo;s filter out these days and calculate barking percentage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data_clean %&amp;gt;%
  group_by(status) %&amp;gt;%
  summarise(percentage = round(n()/nrow(data_clean) * 100, 2)) %&amp;gt;%
  kable()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The numbers are similar to what I have expected - he is really quiet when he is waiting for us to come back from work. Only &lt;strong&gt;0.24%&lt;/strong&gt; of the time Loki is a bad boy.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;th&gt;percentage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Barking&lt;/td&gt;
&lt;td&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resting&lt;/td&gt;
&lt;td&gt;99.76&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_loki3.png&#34; width=&#34;50%;&#34;&gt; 
&lt;p&gt;To see how his ordinary day looks like, I have plotted a random instance from Loki&amp;rsquo;s life. At noon he probably smelled some food and did few &lt;em&gt;woofs&lt;/em&gt;, decided to do some workout before 3 PM and heard some squirrels in the evening. Normally we come back from work at 6 PM, so we either entered the room or he was just anxious waiting for his masters.&lt;/p&gt;
&lt;img src=&#34;https://deadlift.lt/img/dog_day.png&#34; width=&#34;90%;&#34;&gt;
</description>
    </item>
    
    <item>
      <title>[LT] Blogink su R</title>
      <link>https://deadlift.lt/post/lt-blogink-su-r/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <guid>https://deadlift.lt/post/lt-blogink-su-r/</guid>
      <description>&lt;p&gt;R netinkamas darbui su Big Data, administravimui, mašininio mokymo algoritmams produkcijoje, back-end&amp;rsquo;ui, produkcinio lygio web aplikacijoms. Todėl lieka tik patvirtinti faktą, kad su R pagalba negalima sukurti asmeninio blogo. Jei visais šiais dalykais netikite, skaitykite toliau - papasakosiu apie tai, kaip pasigaminti asmeninę svetainę naudojant tik R sintaksę, turėti pilną sveitainės kontrolę, HTTPS, hostingą, versijavimą ir už tai nemokėti nė cento.&lt;/p&gt;
&lt;p&gt;Kurti HTTP dokumentus su R galima jau seniai - ačiū 
&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rmarkdown&lt;/a&gt;. Tačiau prieš daugiau nei du metus pasirodė labai stiprus rmarkdown paturbinimas, leidžiantis R vartotojams būti ir Web developeriais - 
&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blogdown&lt;/a&gt; (iš esmės naudojant R galima dirbti ir kunigu-suvirintoju). Šis paketas palaiko pačius populiariausius statinių web puslapių kūrimo framework&amp;rsquo;us - 
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hugo&lt;/a&gt;,  
&lt;a href=&#34;https://jekyllrb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jekyll&lt;/a&gt;, 
&lt;a href=&#34;https://hexo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hexo&lt;/a&gt;. Todėl užtenka pasirinkti svetainės karkasą ir važiuojam! Savo blogui aš pasirinkau 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;academic&lt;/a&gt; temą skirtą hugo.&lt;/p&gt;
&lt;p&gt;Nuo ko pradėti? Dokumentaciją rasite 
&lt;a href=&#34;https://bookdown.org/yihui/blogdown/installation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;čia&lt;/a&gt;, bet galite tiesiog įvykdyti šias komandas R aplinkoje:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;blogdown&#39;)
blogdown::install_hugo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tuomet RStudio (taip, su Rstudio tai daryti patogiausia) lange paspauskite:&lt;/p&gt;
&lt;p&gt;New Project → Website using blogdown → Užpildykite reikalingus laukus ir pasirinkite temą (pvz. yihui/hugo-lithium arba gcushen/hugo-academic)&lt;/p&gt;
&lt;p&gt;Savąją svetainę peržiūrėti galite naudodami šią funkciją:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown:::serve_site()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naujo posto rašymas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown:::new_post_addin()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Konfiguracijai naudojami &lt;strong&gt;toml&lt;/strong&gt; plėtinio failai, turinys kuriamas markdown sinktakse ir guli &lt;strong&gt;/content&lt;/strong&gt; direktorijoje. Sugeneravus svetainę, visi reikalingi failai atsiranda &lt;strong&gt;/public&lt;/strong&gt; direktorijoje - tuomet galima leisti web serverį ir peržiūrėti naršyklėje (blogdown tai padaro už jus naudodamas servr biblioteką). Kiekvieną kartą išsaugojus turinį (.md arba konfiguracinius failus), svetainė persikraus žaibiškai greitai ir naršyklėje matysite naujausią versiją.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ok, bet kas toliau? Juk neatidarinėsim porto į išorę iš lokalaus tinklo?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dauguma žmonių yra pažįstami su github&amp;rsquo;u. Tačiau gali būti, jog negirdėjote apie 
&lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub pages&lt;/a&gt; funkcionalumą (kitu atveju turbūt nebūtumėte atsidarę šio įrašo). Viskas labai detaliai paaiškinama 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/deployment/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;šioje&lt;/a&gt; dokumentacijoje, tik naudojant blogdown reikia padaryti dar vieną papildomą triuką - sukurti tuščią &lt;strong&gt;.nojekyll&lt;/strong&gt; failą public (jūsų sveitainės) repositorijoje. Taigi, susumuojant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Užsiregistruojame 
&lt;a href=&#34;github.com&#34;&gt;github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sukuriame repositoriją, kuriose laikysite kodą (&lt;strong&gt;private&lt;/strong&gt;, vardas gali būti bet koks)&lt;/li&gt;
&lt;li&gt;Sukuriame repositoriją, kuriose laikysite viešai pasiekiamą svetainės turinį (&lt;strong&gt;public&lt;/strong&gt;, vardas turi būti &lt;strong&gt;jūsų_profilis.github.io&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Atsiklonuojame kodo repositoriją ir sudedame projekto turinį į ją lokaliai&lt;/li&gt;
&lt;li&gt;Konfiguracijoje &lt;strong&gt;config.toml&lt;/strong&gt; pakeičiame: baseurl = &amp;ldquo;https://jūsų_profilis.github.io/&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Ištriname public direktorijos turinį&lt;/li&gt;
&lt;li&gt;Įdedame public direktoriją kaip submodulį:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git submodule add -f -b master https://github.com/jūsų_profilis/jūsų_profilis.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Atnaujiname kodo dalies github repositoriją:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Sugeneruojame public turinį R aplinkoje:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown::build_site()
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Sukuriame tuščią failą &lt;strong&gt;.nojekyll&lt;/strong&gt;, kad github&amp;rsquo;as žinotų, jog tai ne jekyll template&amp;rsquo;as&lt;/li&gt;
&lt;li&gt;Įeiname į github pages repositoriją (atsimenate - ją pridėjome kaip modulį). Sustumiame visą turinį į github&amp;rsquo;ą:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;cd public
git add .
git commit -m &amp;quot;Build website&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Viskas!&lt;/strong&gt; Savo svetainės turinį dabar turėtumėte pasiekti &lt;strong&gt;https://jūsų_profilis.github.io/&lt;/strong&gt; adresu. Jeigu kur nors strigsite - klauskite arba &lt;strong&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RTFM&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Gal kai kuriems kils klausimų, kaip nusiimti apačioje esantį &amp;ldquo;Powered by the Academic theme for Hugo.&amp;rdquo; užrašą? Taip, tai įmanoma nesunkiai padaryti šiek tiek pagooglinus. Aš asmeniškai jį nutariau palikti - pagarba Hugo ir Academic temos kūrėjams. Dabar galite eiti pirkti domeną ir pririšti jį prie ką tik susikurto github puslapio - nebus jokių reklamų, o SSL sertifikatą taip pat sugeneruos pats GitHub&amp;rsquo;as.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External lectures</title>
      <link>https://deadlift.lt/project/reducation/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://deadlift.lt/project/reducation/</guid>
      <description>&lt;p&gt;Sometimes we go back to school and talk about Big Data including big data processing and monitoring.&lt;/p&gt;
&lt;p&gt;Usually I cover these topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Big data processing in big organization&lt;/li&gt;
&lt;li&gt;Monitoring solutions&lt;/li&gt;
&lt;li&gt;Functional programming with R&lt;/li&gt;
&lt;li&gt;Tidyverse approach&lt;/li&gt;
&lt;li&gt;Web applications with shiny&lt;/li&gt;
&lt;li&gt;Building REST API with R&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Target audience - Data Science students in Vilnius University and Kaunas University of Technology.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Racing cars controlled by mind power</title>
      <link>https://deadlift.lt/project/bs2019/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://deadlift.lt/project/bs2019/</guid>
      <description>&lt;p&gt;This time R served as a backend for user registration, controlling car parameters and front end page. The 
&lt;a href=&#34;https://www.rplumber.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plumber&lt;/a&gt; package made the development really easy (that&amp;rsquo;s what plumbers do).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;plumber.png&#34; alt=&#34;REST API build with R&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our booth was one of the most popular during the whole conference.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;stats.png&#34; alt=&#34;Game statistics&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Augmented reality pool table</title>
      <link>https://deadlift.lt/project/bs2018/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://deadlift.lt/project/bs2018/</guid>
      <description>&lt;p&gt;Can you draw a pool table and make some real-time dashboards? &amp;ldquo;Sure I can.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The whole project was a huge team effort! However, the interesting part for me was creating real-time visualizations from a data stream. I can tell you a secret - it&amp;rsquo;s the reactivePoll function in shiny server. How to draw a table, some balls and a path? The ggplot2 comes to the rescue with just a few lines of code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pool.png&#34; alt=&#34;Pool table visualization&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dbplyr package helped to summarise statistics and DT for table visualization - just in a few lines of code as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;stats.png&#34; alt=&#34;Game statistics&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Master Thesis</title>
      <link>https://deadlift.lt/project/mastersproject/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://deadlift.lt/project/mastersproject/</guid>
      <description>&lt;p&gt;It was a great honor to receive an award from Vytautas Janilionis in the National Prof. Jonas Matulionis mathematics competition back in 2007. Who could have thought that after a decade I will have this person as a supervisor for my Master&amp;rsquo;s Project in Data Science and I will do the last presentation in the auditorium named under J. Matulionis name. Being the first test rabbits in Vilnius group turned out just fine!&lt;/p&gt;
&lt;p&gt;My Master&amp;rsquo;s Thesis was about customer review classification in e-commerce sector. I have used deep learning approach in combination with conventional NLP methods and implemented web service for real-time customer review classification.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
